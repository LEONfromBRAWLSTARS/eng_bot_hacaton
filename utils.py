from collections import deque

def get_markdownv2_text(input_text):
    output_text = ''
    for i in input_text:
        if i in ['_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
            output_text += "\\" + i
        else:
            output_text += i
    return output_text

# Варварским способом получаем слово из сообщения, которое конструирует функция translate
def get_word(message):
    return message.split()[2]


# Старался сделать как можно более оптимизированно, чтобы слова, которые пользователь обозначил, как те, которые он еще
# хочет повторить, мы брали и перемещали из левого края списка в правый, тем самым, самое раннее слово в списке, после
# того, как пользователь его повторит, автоматически перемещалось в самый правый край списка, делая это слово самым
# поздним. А слово, которое пользователь обозначил как уже выученное мы бы брали и удаляли из левого края.
# вот пример:
# words = ['horse', 'cat', 'cow', 'donkey'] слова раставлены в порядке их добавления(от самих ранних к самым поздним)
# пользователю выдается слово words[0] т.е. 'horse'
# пользователь говорит, что хочет повторить еще это слово в будущем.
# мы берем и перемещаем это слово из левого края в правый, т.е. words = ['cat', 'cow', 'donkey', 'horse'] и мы
# запоминаем слово 'horse' и добавляем его в bound_for_repeating_words, и, если мы на него натыкаемся в будущем, то мы
# знаем, что пользователь повторил все слова.
# А если же пользователь говорит, что он выучил это слово, то мы удаляем его, т.е. words = ['cat', 'cow', 'donkey']
# и потом также берем words[0].
# Так вот, для всех этих манипуляциий лучше всего подходит тип данных deque(), как описано внизу.
def deque_manipulation(array, operation=None):
    array = deque(array)
    if operation == 'stay':
        el = array.popleft()
        array.append(el)
    elif operation == 'remove':
        array.popleft()
    return array

# Удаляем ~ в пользовательском сообщении, так как это может нам подкосить базу данных
def deleting_tildas(text):
    output = ''
    for i in text:
        if i != '~':
            output += i
    return output