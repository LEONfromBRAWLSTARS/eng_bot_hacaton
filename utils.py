from collections import deque
from math import ceil
def get_markdownv2_text(input_text):
    output_text = ''
    for i in input_text:
        if i in ['_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', '\\']:
            output_text += "\\" + i
        else:
            output_text += i
    return output_text

# –í–∞—Ä–≤–∞—Ä—Å–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è translate
def get_word(message):
    return message.split()[2]


# –°—Ç–∞—Ä–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–æ–∑–Ω–∞—á–∏–ª, –∫–∞–∫ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –µ—â–µ
# —Ö–æ—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –º—ã –±—Ä–∞–ª–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–ª–∏ –∏–∑ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —Å–ø–∏—Å–∫–∞ –≤ –ø—Ä–∞–≤—ã–π, —Ç–µ–º —Å–∞–º—ã–º, —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ, –ø–æ—Å–ª–µ
# —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–ª–æ—Å—å –≤ —Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —Å–ø–∏—Å–∫–∞, –¥–µ–ª–∞—è —ç—Ç–æ —Å–ª–æ–≤–æ —Å–∞–º—ã–º
# –ø–æ–∑–¥–Ω–∏–º. –ê —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–æ–∑–Ω–∞—á–∏–ª –∫–∞–∫ —É–∂–µ –≤—ã—É—á–µ–Ω–Ω–æ–µ –º—ã –±—ã –±—Ä–∞–ª–∏ –∏ —É–¥–∞–ª—è–ª–∏ –∏–∑ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è.
# –≤–æ—Ç –ø—Ä–∏–º–µ—Ä:
# words = ['horse', 'cat', 'cow', 'donkey'] —Å–ª–æ–≤–∞ —Ä–∞—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è(–æ—Ç —Å–∞–º–∏—Ö —Ä–∞–Ω–Ω–∏—Ö –∫ —Å–∞–º—ã–º –ø–æ–∑–¥–Ω–∏–º)
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ words[0] —Ç.–µ. 'horse'
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â–µ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –±—É–¥—É—â–µ–º.
# –º—ã –±–µ—Ä–µ–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ –∏–∑ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –≤ –ø—Ä–∞–≤—ã–π, —Ç.–µ. words = ['cat', 'cow', 'donkey', 'horse'] –∏ –º—ã
# –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–æ 'horse' –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ bound_for_repeating_words, –∏, –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–≥–æ –Ω–∞—Ç—ã–∫–∞–µ–º—Å—è –≤ –±—É–¥—É—â–µ–º, —Ç–æ –º—ã
# –∑–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞.
# –ê –µ—Å–ª–∏ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ–Ω –≤—ã—É—á–∏–ª —ç—Ç–æ —Å–ª–æ–≤–æ, —Ç–æ –º—ã —É–¥–∞–ª—è–µ–º –µ–≥–æ, —Ç.–µ. words = ['cat', 'cow', 'donkey']
# –∏ –ø–æ—Ç–æ–º —Ç–∞–∫–∂–µ –±–µ—Ä–µ–º words[0].
# –¢–∞–∫ –≤–æ—Ç, –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö deque(), –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤–Ω–∏–∑—É.
def deque_manipulation(array, operation=None):
    array = deque(array)
    if operation == 'stay':
        el = array.popleft()
        array.append(el)
    elif operation == 'remove':
        array.popleft()
    return array

# –£–¥–∞–ª—è–µ–º ~ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–∫–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def deleting_tildas(text):
    output = ''
    for i in text:
        if i != '~':
            output += i
    return output



from vocab import get_info_of_word, get_translation
def translate(message, state='show_word'):

    #if not is_user_in_words(user_id):
        #add_user_to_words_table(user_id)

    translation, error = get_translation(message)
    definition, example, audio, error = get_info_of_word(message)
    resp = ''
    if state=='show_word':
        resp = f'üìå –°–ª–æ–≤–æ {message} üìå\n'
    if error != None or (translation == None and definition == None and example == None and audio == None):

        return False, False

    #add_word(user_id, message)
    #print(get_words(user_id))

    if translation:
        trans = ", ".join(translation)
        resp += f'*Meaning*: {trans}\n'

    if definition:
        resp += f'*Definition*: {definition}\n'

    if example:
        resp += f'*Example*: {example}\n'

    if audio:
        return resp, audio
    return resp, False


def print_result(seconds, know, dont_know, tests):
    resp = "üìä <b>–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> üìä\n\n"
    resp += f"‚åõ –° –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é —Ç—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª <em>{round(seconds / 60, 1)} –º–∏–Ω—É—Ç(—ã)</em>\n"
    resp += f"üìö –¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å <em>{know} —Å–ª–æ–≤(–æ)</em>\n"
    resp += f"üîé –¢–µ–±–µ –µ—â–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—É—á–∏—Ç—å <em>{dont_know} —Å–ª–æ–≤(–æ)</em> \n"
    resp += f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: \n"
    levels = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']
    for i in range(len(levels)):
        resp += f"<b>{levels[i]}: </b>"
        state, current, right = tests[i]
        if state == "None":
            resp += "–ù–µ –Ω–∞—á–∞—Ç\n"
        elif state == "Start":
            resp += f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ {current}-–æ–º(–µ–º) –≤–æ–ø—Ä–æ—Å–µ, –∏–∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ <em>{right}</em>\n"
        else:
            resp += f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º <em>{right}</em> –∏–∑ 10 \n"
    return resp


def user_words_stat(dont_know, know):
    cnt = 1
    resp = "<b>–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞</b>: \n"
    if dont_know == []:
        resp += "–í—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞. \n"
    else:
        for i in range(len(dont_know)):
            resp += f"{cnt}. {dont_know[i]}\n"
            cnt += 1

    resp += "\n<b>–°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–Ω–∞–µ—à—å</b>: \n"
    cnt = 1
    if know == []:
        resp += "–í—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã—É—á–µ–Ω–Ω—ã–º –Ω–∏–∫–∞–∫–∏–µ —Å–ª–æ–≤–∞"
    else:
        for i in range(len(know)):
            resp += f"{cnt}. {know[i]}\n"
            cnt += 1
    return resp